=============================================================================================================
MVC (Model-View-Controller) Pattern

Description:
The MVC pattern separates an application into three main components:

Model: Manages the data and business logic.

View: Handles UI and presentation.

Controller: Acts as an intermediary between Model and View.

 Problem It Solves:
Avoids tightly coupling the UI with the business logic.

Makes it easier to update UI or logic independently.

Helps in separating concerns and improves maintainability.

Effect on Design:

Clean separation of concerns.

Reusable UI and logic components.

Easier unit testing for message storage and validation logic.

=============================================================================================================

2. Observer Pattern

Description:
The Observer pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.

Problem It Solves:
Keeps the UI or other system parts updated when something in the model (e.g., a new message) changes.

Helps implement features like live messaging or notifications.

Effect on Design:

Modular, extensible message-update system.

Enables future WebSocket or real-time support with minimal changes.

=============================================================================================================

3. Singleton Pattern
ðŸ”¹ Description:
Singleton ensures a class has only one instance and provides a global point of access to it.

ðŸ”§ Problem It Solves:
Prevents redundant instances of classes that manage shared resources (e.g., DB connections).

Ensures consistency when multiple scripts need the same instance.

Effect on Design:

Avoids multiple unnecessary DB connections.

Ensures consistent access to DB across scripts